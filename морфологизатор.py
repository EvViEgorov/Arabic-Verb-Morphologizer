# -*- coding: utf-8 -*-
"""морфологизатор

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R310SBsjMtz3ch3uCAIqarSTn9EJwnOM
"""



#МОРФОЛОГИЗАТОР СИЛЬНОГО ГЛАГОЛА

verb_form = input()
perf_flex = {}
impf_pref = ['ya', 'yu', 'ta', 'tu', 'na', 'nu']
long_vowels = ['ā', 'ī', 'ū']
vowels = ['a', 'i', 'u']
verb_form2 = verb_form

def Poroda(verb_form):
    poroda = str()
    if verb_form[0] == 'y' and verb_form[1] == 'u' and verb_form[3] not in vowels:
        return 'IV'
    if verb_form[0] == 't' and verb_form[1] == 'a' and verb_form[4] == verb_form[5] and verb_form[len(verb_form) - 1] == 'a':
        return 'V'
        #добавить проверку по последней букве (чтобы не было омонимии форм?? а точно ли надо?)
    elif verb_form[0] == 't' and verb_form[1] == 'a' and verb_form[3] in long_vowels and verb_form[len(verb_form) - 1] == 'a':
        return 'VI'
    elif len(verb_form) >= 8 and verb_form[0] == 't' and verb_form[1] == 'a' and verb_form[6] == verb_form[7]:
        return 'V'
    elif len(verb_form) >= 6 and  verb_form[0] == 't' and verb_form[1] == 'a' and verb_form[5] in long_vowels:
        return 'VI'
    for i in impf_pref:
        if i in verb_form:
            verb_form1 = ''
            indexes = [0, 1]
            for j in range(len(verb_form)):
                if j not in indexes:
                    verb_form1 += verb_form[j]
            verb_form = verb_form1
            break
        elif verb_form[0] == 'i':
            verb_form1 = ""
            index = 0
            for j in range(len(verb_form)):
                if j != index:
                    verb_form1 += verb_form[j]
            verb_form = verb_form1
            break
    count_cons = 0
    for i in verb_form:
        if i not in vowels:
            count_cons += 1
    if count_cons <= 3 and verb_form2[1] != 'u':
        poroda = 'I'
    elif count_cons <= 3 and verb_form2[1] == 'u':
        poroda = 'IV'
    elif verb_form[0] == 's' and verb_form[1] == 't' and verb_form[2] == 'a':
        poroda = 'X'
    elif list(verb_form)[0] == 'n':
        if list(verb_form)[1] == 't':
            poroda = 'VII/VIII: homonymy possible'
        else:
            poroda = 'VII'
    elif verb_form[1] == 't' and verb_form[2] == 'a':
        poroda = 'VIII'
    elif list(verb_form)[1] == 'a' and list(verb_form)[2] == 't' and list(verb_form)[3] == 'a':
        if list(verb_form)[5] in long_vowels:
            poroda = 'VI'
        elif list(verb_form)[6] == list(verb_form)[7]:
            poroda = 'V'
    elif list(verb_form)[0] == 'ˀ' and list(verb_form)[1] in vowels:
        if verb_form[len(verb_form) - 1] == 'u':
            return 'I'
        elif verb_form[len(verb_form) - 1] == 'a' and len(verb_form) == 7:
            return 'I'
        elif verb_form[len(verb_form) - 1] not in vowels and len(verb_form) == 6:
            return 'I'
        else:
            poroda = 'IV'
        #тут нужна проработка случаев 1sg
    elif verb_form[2] == verb_form[3]:
        poroda = 'II'
    elif list(verb_form)[0] == 't' and list(verb_form)[1] == 'a':
        if list(verb_form)[3] in long_vowels:
            poroda = 'VI'
        elif list(verb_form)[4] == list(verb_form)[5]:
            poroda = 'V'
    elif verb_form[1] in long_vowels:
              poroda = 'III'
    else:
        poroda = 'I'
    return poroda

#9 породу я не могу написать, я хз что это

verb_poroda = Poroda(verb_form)

perf_dict = {'tumā':'2du', 'atā':'3fdu', 'ā':'3mdu', 'nā':'1pl', 'tum':'2mpl',
             'tunna':'2fpl', 'at':'3fsg', 'ti':'2fsg', 'ta':'2msg', 'tu':'1sg', 'a':'3msg'}
impf_dict = {'yau':'3msg', 'tau':'3fsg/2msg', 'yaāni':'3mdu', 'taāni':'3fdu/2du', 'taīna':'3fsg',
             'yaūna':'3mpl', 'taūna':'2mpl', 'nau':'1pl',
             'yuu':'3msg', 'tuu':'3fsg/2msg', 'yuāni':'3mdu', 'tuāni':'3fdu/2du', 'tuīna':'3fsg',
             'yuūna':'3mpl', 'tuūna':'2mpl', 'nuu':'1pl', 'ˀau':'1sg', 'ˀuu':'1sg'}
subj_dict = {'naa':'1pl', 'nua':'1pl', 'ˀaa':'1sg', 'ˀua':'1sg'}
juss_dict = {'ya':'3msg', 'ta':'3fsg/2msg', 'na':'1pl', 'yu':'3msg', 'tu':'3fsg/2msg', 'nu':'1pl', 'taī':'2fsg', 'tuī':'2fsg', 'ˀa':'1sg', 'ˀu':'1sg'}
homonyms_dict_1 = {'yaā':'3mdu', 'taā':'3fdu/2du', 'yaū':'3mpl', 'taū':'2mpl',
                   'yuā':'3mdu', 'tuā':'3fdu/2du', 'yuū':'3mpl', 'tuū':'2mpl'}
homonyms_dict_2 = {'yana':'3fpl', 'tana':'2mpl', 'yuna':'3fpl', 'tuna':'2mpl'}

#там надо добавить приписку про омонимию, но хуй с ней сейчас

#это функция, определяющая tense (время и наклонение) и форму - лицо, число, род
def TenseAndForm(verb_form, verb_poroda):
    verb_form_mod = ''
    if verb_poroda == 'I' or verb_poroda == 'IV':
        if verb_form[0] + verb_form[1] in impf_pref and verb_form[3] not in vowels and verb_form[3] not in long_vowels:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(6, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(5, len(verb_form)):
                verb_form_mod += verb_form[i]
    elif verb_poroda == 'II':
        if verb_form[0] + verb_form[1] in impf_pref and verb_form[4] == verb_form[5]:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(8, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(6, len(verb_form)):
                verb_form_mod += verb_form[i]
    elif verb_poroda == 'III':
        if verb_form[0] + verb_form[1] in impf_pref:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(7, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(5, len(verb_form)):
                verb_form_mod += verb_form[i]
    elif verb_poroda == 'V':
        if verb_form[0] + verb_form[1] in impf_pref and verb_form[6] == verb_form[7]:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(10, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(8, len(verb_form)):
                verb_form_mod += verb_form[i]
    elif verb_poroda == 'VI':
        if verb_form[0] + verb_form[1] in impf_pref and verb_form[5] in long_vowels:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(9, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(7, len(verb_form)):
                verb_form_mod += verb_form[i]
    elif verb_poroda == 'VII' or verb_poroda == 'VIII':
        if verb_form[0] + verb_form[1] in impf_pref:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(8, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(7, len(verb_form)):
                verb_form_mod += verb_form[i]
    elif verb_poroda == 'X':
        if verb_form[0] + verb_form[1] in impf_pref:
            verb_form_mod += verb_form[0] + verb_form[1]
            for i in range(9, len(verb_form)):
                verb_form_mod += verb_form[i]
        else:
            verb_form_mod = ''
            for i in range(8, len(verb_form)):
                verb_form_mod += verb_form[i]
    if verb_form_mod in subj_dict.keys():
        tense = 'subjunctive'
        form = subj_dict[verb_form_mod]
    elif verb_form_mod in impf_dict.keys():
        tense = 'imperfect'
        form = impf_dict[verb_form_mod]
    elif verb_form_mod in juss_dict.keys():
        tense = 'jussive'
        form = juss_dict[verb_form_mod]
    elif verb_form_mod in homonyms_dict_1.keys():
        tense = 'jussive/subjunctive'
        form = homonyms_dict_1[verb_form_mod]
    elif verb_form_mod in homonyms_dict_2.keys():
        tense = 'subjunctive/imperfect/jussive'
        form = homonyms_dict_2[verb_form_mod]
    elif verb_form_mod in perf_dict.keys():
        tense = 'perfect'
        form = perf_dict[verb_form_mod]
    elif verb_form_mod in juss_dict.keys():
        tense = 'jussive'
        form = juss_dict[verb_form_mod]
    elif verb_poroda == 'VII/VIII: homonymy possible':
        return TenseAndForm(verb_form, 'VII'), TenseAndForm(verb_form, 'VIII')

    return verb_poroda, tense, form

tense = TenseAndForm(verb_form, verb_poroda)[1]

#здесь должна быть функция определения типового гласного и соответственно он будет одним из параметров

def Root(verb_form, tense, verb_poroda):
    root = ''
    if verb_poroda == 'I':
        if tense == 'perfect':
            for i in range(5):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        else:
            for i in range(2, 5):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
    elif verb_poroda == 'II':
        if tense == 'perfect':
            for i in range(6):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        else:
            for i in range(2, 6):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        if len(root) == 4 and root[1] == root[2]:
            root = root[0] + root[1] + root[3]
    elif verb_poroda == 'III':
        if tense == 'perfect':
            for i in range(5):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        else:
            for i in range(2, 6):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
    elif verb_poroda == 'IV':
        for i in range(2, 6):
            if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                root += verb_form[i]
    elif verb_poroda == 'V':
        if tense == 'perfect':
            for i in range(2, 8):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
                    if len(root) == 4 and root[1] == root[2]:
                        root = root[0] + root[1] + root[3]
        else:
            for i in range(3, 10):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
                    if len(root) == 4 and root[1] == root[2]:
                        root = root[0] + root[1] + root[3]
    elif verb_poroda == 'VI':
        if tense == 'perfect':
             for i in range(2, 7):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        else:
            for i in range(3, 9):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
    elif verb_poroda == 'VII':
        if tense == 'perfect':
             for i in range(2, 7):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        else:
            for i in range(3, 8):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
    elif verb_poroda == 'VIII':
        if tense == 'perfect':
            root = verb_form[1] + verb_form[4] + verb_form[6]
        else:
            root = verb_form[2] + verb_form[5] + verb_form[7]
    elif verb_poroda == 'X':
        if tense == 'perfect':
             for i in range(4, 8):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
        else:
            for i in range(5, 9):
                if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                    root += verb_form[i]
    elif verb_poroda == 'VII/VIII: homonymy possible':
      if TenseAndForm(verb_form, verb_poroda)[1][1] == 'perfect':
          for i in range(2, 7):
              if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                  root += verb_form[i]
      else:
          for i in range(3, 8):
              if verb_form[i] not in vowels and verb_form[i] not in long_vowels:
                  root += verb_form[i]
      root1 = root
      if TenseAndForm(verb_form, verb_poroda)[1][1] == 'perfect':
          root = verb_form[1] + verb_form[4] + verb_form[6]
          return root, root1
      else:
          root = verb_form[2] + verb_form[5] + verb_form[7]
          return root, root1
    return root
root = Root(verb_form, tense, verb_poroda)

def TurnIntoPerf(root):
    if type(root) == tuple:
        infinitive1 = root[0][0] + 'a' + root[0][1] + 'V' + root[0][2] + 'a'
        infinitive2 = root[1][0] + 'a' + root[1][1] + 'V' + root[1][2] + 'a'
        return (TenseAndForm(verb_form, verb_poroda)[0], root[0], infinitive1), (TenseAndForm(verb_form, verb_poroda)[1], root[1], infinitive2)
    else:
        infinitive = root[0] + 'a' + root[1] + 'V' + root[2] + 'a'
        return TenseAndForm(verb_form, verb_poroda), root, infinitive

print(TurnIntoPerf(root))